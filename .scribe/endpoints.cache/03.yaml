## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Author Tickets'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/v1/authors/{author_id}/tickets'
    metadata:
      groupName: 'Author Tickets'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get All Tickets for an Author'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      author_id: 1
    queryParameters:
      sort:
        name: sort
        description: 'Sort the tickets by a specific field(s). Separate by comma. Denote desc with a minus sign.'
        required: false
        example: 'title,-createdAt'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter tickets by status code: A, C, H, X. Separate by comma.'
        required: false
        example: 'A,C'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[title]':
        name: 'filter[title]'
        description: 'Filter tickets by title. Wildcard supported.'
        required: false
        example: '*fix*'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[createdAt]':
        name: 'filter[createdAt]'
        description: 'Filter tickets by creation date. Can be a single date or a range separated by comma.'
        required: false
        example: '2023-01-01,2023-01-31'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[updatedAt]':
        name: 'filter[updatedAt]'
        description: 'Filter tickets by update date. Can be a single date or a range separated by comma.'
        required: false
        example: '2023-01-01,2023-01-31'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      include:
        name: include
        description: 'The relationships to be included.'
        required: false
        example: author
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      sort: 'title,-createdAt'
      'filter[status]': 'A,C'
      'filter[title]': '*fix*'
      'filter[createdAt]': '2023-01-01,2023-01-31'
      'filter[updatedAt]': '2023-01-01,2023-01-31'
      include: author
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"type":"ticket","id":79,"attributes":{"title":"consectetur enim non","status":"X","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/79"}},{"type":"ticket","id":35,"attributes":{"title":"dolor consectetur temporibus","status":"C","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/35"}},{"type":"ticket","id":89,"attributes":{"title":"eos vitae impedit","status":"H","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/89"}},{"type":"ticket","id":61,"attributes":{"title":"error cum minus","status":"X","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/61"}},{"type":"ticket","id":47,"attributes":{"title":"est nulla et","status":"C","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/47"}},{"type":"ticket","id":77,"attributes":{"title":"ex dolor rerum","status":"H","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/77"}},{"type":"ticket","id":84,"attributes":{"title":"facere esse autem","status":"C","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/84"}},{"type":"ticket","id":9,"attributes":{"title":"repellat excepturi quidem","status":"C","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/9"}},{"type":"ticket","id":16,"attributes":{"title":"sapiente tempora aspernatur","status":"A","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/16"}},{"type":"ticket","id":58,"attributes":{"title":"sint architecto expedita","status":"H","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/58"}},{"type":"ticket","id":74,"attributes":{"title":"sint quasi at","status":"C","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"relationships":{"author":{"data":{"type":"user","id":1},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}}},"includes":{"type":"user","id":1,"attributes":{"name":"Mr. Rick Pouros","email":"adella03@example.org","emailVerifiedAt":"2024-12-15T18:24:24.000000Z","createdAt":"2024-12-15T18:24:25.000000Z","updatedAt":"2024-12-15T18:24:25.000000Z"},"links":{"self":"http:\/\/localhost\/api\/v1\/authors\/1"}},"links":{"self":"http:\/\/localhost\/api\/v1\/tickets\/74"}}],"links":{"first":"http:\/\/localhost\/api\/v1\/authors\/1\/tickets?page=1","last":"http:\/\/localhost\/api\/v1\/authors\/1\/tickets?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"http:\/\/localhost\/api\/v1\/authors\/1\/tickets?page=1","label":"1","active":true},{"url":null,"label":"Next &raquo;","active":false}],"path":"http:\/\/localhost\/api\/v1\/authors\/1\/tickets","per_page":15,"to":11,"total":11}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4|XHXizB1KTnNkHiKvtgXy8Nj4zRa7dVBXa1K3RgZMa79c7dbb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/authors/{author_id}/tickets'
    metadata:
      groupName: 'Author Tickets'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a Ticket for an Author'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      author_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'The title of the ticket.'
        required: true
        example: 'Fix the bug'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'The description of the ticket.'
        required: true
        example: 'The bug is causing the application to crash.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: 'The status of the ticket. A: Active, C: Closed, H: On Hold, X: Canceled.'
        required: true
        example: A
        type: string
        enumValues:
          - A
          - C
          - H
          - X
        exampleWasSpecified: false
        nullable: false
        custom: []
      author:
        name: author
        description: 'The ID of the author of the ticket. The <code>id</code> of an existing record in the users table.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: 'Fix the bug'
          description: 'The bug is causing the application to crash.'
          status: A
      author: 1
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4|XHXizB1KTnNkHiKvtgXy8Nj4zRa7dVBXa1K3RgZMa79c7dbb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/authors/{author_id}/tickets/{id}'
    metadata:
      groupName: 'Author Tickets'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Ticket for an Author'
      description: 'Delete the specified ticket. Users can only delete their own tickets. Managers can delete any ticket.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: fuga
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      author_id: fuga
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4|XHXizB1KTnNkHiKvtgXy8Nj4zRa7dVBXa1K3RgZMa79c7dbb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/authors/{author}/tickets/{ticket}'
    metadata:
      groupName: 'Author Tickets'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Replace a Ticket for an Author'
      description: 'Replace the specified ticket. Managers only can replace tickets.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author:
        name: author
        description: 'The author.'
        required: true
        example: voluptate
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      ticket:
        name: ticket
        description: 'The ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      author: voluptate
      ticket: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'The title of the ticket.'
        required: true
        example: 'Fix the bug'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'The description of the ticket.'
        required: true
        example: 'The bug is causing the application to crash.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: 'The status of the ticket. A: Active, C: Closed, H: On Hold, X: Canceled.'
        required: true
        example: A
        type: string
        enumValues:
          - A
          - C
          - H
          - X
        exampleWasSpecified: false
        nullable: false
        custom: []
      author:
        name: author
        description: 'The <code>id</code> of an existing record in the users table.'
        required: true
        example: reprehenderit
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: 'Fix the bug'
          description: 'The bug is causing the application to crash.'
          status: A
      author: reprehenderit
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4|XHXizB1KTnNkHiKvtgXy8Nj4zRa7dVBXa1K3RgZMa79c7dbb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/authors/{author_id}/tickets/{id}'
    metadata:
      groupName: 'Author Tickets'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a Ticket for an Author'
      description: 'Update the specified ticket. Users can only update their own tickets. Managers can update any ticket.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: et
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      author_id: et
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data.attributes:
        name: data.attributes
        description: ''
        required: false
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data:
        name: data
        description: ''
        required: false
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'The title of the ticket.'
        required: false
        example: 'Fix the bug'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'The description of the ticket.'
        required: false
        example: 'The bug is causing the application to crash.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: 'The status of the ticket. A: Active, C: Closed, H: On Hold, X: Canceled.'
        required: false
        example: A
        type: string
        enumValues:
          - A
          - C
          - H
          - X
        exampleWasSpecified: false
        nullable: false
        custom: []
      author:
        name: author
        description: 'The ID of the author of the ticket. The <code>id</code> of an existing record in the users table.'
        required: false
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: 'Fix the bug'
          description: 'The bug is causing the application to crash.'
          status: A
      author: '1'
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4|XHXizB1KTnNkHiKvtgXy8Nj4zRa7dVBXa1K3RgZMa79c7dbb'
    controller: null
    method: null
    route: null
    custom: []
